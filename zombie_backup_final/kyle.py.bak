# rtai/indicators/kyle.py
"""
Kyle Lambda Oscillator - Market Impact Coefficient come RSI-like
==============================================================

Trasforma Kyle λ in oscillatore 0-100 usando log-normalization.
"""

import math
from statistics import median
from rtai.indicators.filters import Oscillator
from rtai.config import INDICATORS

class KyleOsc:
    """Kyle λ trasformato in oscillatore RSI-like"""
    
    def __init__(self, **kwargs):
        # Usa parametri specifici per Kyle dalla config
        params = {**INDICATORS["kyle"], **kwargs}
        self.osc = Oscillator(**params)
        self.last_raw = 0.0

    def on_minute(self, price_changes_abs, notional_list):
        """
        Processa Kyle λ per minuto
        
        Args:
            price_changes_abs: Lista |Δp| per trade nel minuto
            notional_list: Lista notional corrispondenti
            
        Returns:
            Dict con valori Kyle processati
        """
        if not price_changes_abs or not notional_list:
            kyle_raw = 0.0
            kyle_log = 0.0
        else:
            # Calcola median impact robusto
            impacts = []
            for dp, notional in zip(price_changes_abs, notional_list):
                if notional > 1e-9:  # Evita divisione per zero
                    impacts.append(abs(dp) / notional)
            
            if impacts:
                kyle_raw = median(impacts)
                # Log-normalization per stabilizzare
                kyle_log = math.log(max(1e-12, kyle_raw))
            else:
                kyle_raw = 0.0
                kyle_log = 0.0
        
        self.last_raw = kyle_raw
        rsi_like, z, zf = self.osc.step(kyle_log)
        
        return {
            "kyle_raw": kyle_raw,
            "kyle_log": kyle_log,
            "kyle_z": z,
            "kyle_zf": zf,
            "kyle_rsi": rsi_like,   # 0..100
        }
