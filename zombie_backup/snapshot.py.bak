"""Snapshot generator for RTAI system"""

import matplotlib.pyplot as plt
import numpy as np
from collections import defaultdict
import httpx
import asyncio
from loguru import logger
from datetime import datetime

from rtai.indicators.base import OFI, VPIN, KyleLambda, LPI
# from rtai.unified_visualizer import UnifiedVisualizer, PlotConfig  # REMOVED - will restore with backtesting.py


async def generate_snapshot(symbol: str = "BTCUSDT") -> str:
    """Generate a single snapshot chart"""
    logger.info(f"Generating snapshot for {symbol}")
    
    # Get historical data from Binance
    url = "https://api.binance.com/api/v3/klines"
    params = {
        "symbol": symbol,
        "interval": "1m",
        "limit": 1000
    }
    
    async with httpx.AsyncClient() as client:
        response = await client.get(url, params=params)
        data = response.json()
    
    # Parse candle data
    candles = []
    for item in data:
        candles.append({
            'timestamp': int(item[0]) / 1000,
            'open': float(item[1]),
            'high': float(item[2]),
            'low': float(item[3]),
            'close': float(item[4]),
            'volume': float(item[5])
        })
    
    # Calculate indicators with correct parameters
    ofi = OFI()
    vpin = VPIN()
    kyle = KyleLambda()
    lpi = LPI()
    
    # Process data
    for i, candle in enumerate(candles[1:], 1):
        prev = candles[i-1]
        price_change = candle['close'] - prev['close']
        
        # Simulate trade flow
        qty_signed = candle['volume'] * (1 if price_change > 0 else -1)
        
        ofi.update(qty_signed)
        vpin.update(qty_signed, candle['close'])
        kyle.update(qty_signed, candle['close'])
        
        # LPI simulation
        side = "long" if price_change > 0 else "short"
        lpi.update(side, candle['volume'])
    
    # Create chart data compatible with unified visualizer
    config = PlotConfig()
    visualizer = UnifiedVisualizer(symbol, config)
    
    # Generate 2 hours of historical BTC price data with 1-minute intervals for optimal visibility
    logger.info("üìà Generating historical price data for snapshot visualization...")
    visualizer.generate_historical_price_data(hours=2, current_price=candles[-1]['close'])
    
    # Add the last 100 data points to the visualizer
    for i, candle in enumerate(candles[-100:]):
        timestamp = candle['timestamp'] / 1000  # Convert from ms to seconds
        price = candle['close']
        
        # Create indicators dict with current values
        indicators = {
            'ofi': ofi.value if ofi.value else 0,
            'vpin': vpin.value if vpin.value else 0,
            'kyle': kyle.value if kyle.value else 0,
            'lpi': lpi.value if lpi.value else 0,
            'volume': candle['volume'],
            'vpin_threshold': 0.98
        }
        
        visualizer.update_data(timestamp, price, indicators)
    
    # Generate snapshot using unified comprehensive dashboard (not separate pipeline)
    output_path = f"output/snapshot_{symbol.lower()}.png"
    generated_path = visualizer.generate_unified_comprehensive_dashboard(output_path)
    
    logger.success(f"Snapshot saved: {generated_path}")
    return generated_path


def main():
    """Sync wrapper for snapshot generation"""
    import sys
    
    symbol = "BTCUSDT"
    if len(sys.argv) > 1:
        symbol = sys.argv[1]
    
    try:
        asyncio.run(generate_snapshot(symbol))
    except KeyboardInterrupt:
        print("Snapshot generation cancelled")


if __name__ == "__main__":
    print("‚ùå DEPRECATED ENTRY POINT - Use python -m rtai.main --snapshot instead")
    import sys
    sys.exit(1)
